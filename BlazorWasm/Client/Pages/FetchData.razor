@page "/fetchdata"
@using BlazorWasm.Client.Models
@using BlazorWasm.Client.Services
@inject PersistentComponentState ApplicationState
@inject IWeatherForecastService Service
@implements IDisposable
<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (_forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in _forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private PersistingComponentStateSubscription _subscription;
    private IEnumerable<WeatherForecast>? _forecasts;

    protected override async Task OnInitializedAsync()
    {
        _subscription = ApplicationState.RegisterOnPersisting(PersistForecasts);
        _forecasts = ApplicationState.TryTakeFromJson<IEnumerable<WeatherForecast>>("fetchData", out var stored) ? 
            stored : 
            await Service.GetForecastAsync(DateOnly.FromDateTime(DateTime.Now));
    }

    private Task PersistForecasts()
    {
        ApplicationState.PersistAsJson("fetchData", _forecasts);
        return Task.CompletedTask;
    }

    public void Dispose() =>
        _subscription.Dispose();

}
