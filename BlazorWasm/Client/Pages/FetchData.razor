@page "/fetchdata"
@using BlazorWasm.Client.Services.Weather
@using Grpc.Core
@using NodaTime.Text
@inject PersistentComponentState ApplicationState
@inject IWeatherForecastService Service
@implements IDisposable
<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (_forecasts == null && string.IsNullOrEmpty(ExceptionInfo))
{
    <p><em>Loading...</em></p>
}
else if (_forecasts != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in _forecasts)
            {
                <tr>
                    <td>@LocalDatePattern.Iso.Format(forecast.Date)</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <pre>@ExceptionInfo</pre>
}

@code {
    private PersistingComponentStateSubscription _subscription;
    private WeatherForecastResponse[]? _forecasts;
    private string? ExceptionInfo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _subscription = ApplicationState.RegisterOnPersisting(() =>
        {
            ApplicationState.PersistAsJson("fetchData", _forecasts);
            return Task.CompletedTask;
        });
        try
        {
            _forecasts = ApplicationState.TryTakeFromJson<WeatherForecastResponse[]>("fetchData", out var stored) ?
                stored :
                await Service.GetForecastsAsync(new WeatherForecastRequest(DateTime.Now));
        }
        catch (RpcException e) when (e.StatusCode == StatusCode.Internal && e.Status.DebugException is HttpRequestException)
        {
            ExceptionInfo = "RpcException: Server appears to be offline";
        }
    }

    public void Dispose() =>
        _subscription.Dispose();
}
